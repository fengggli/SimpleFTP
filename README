Simple FTP implementation in java
    --program 2 in CSCI 53700, Distributed System in IUPUI

Author:Feng Li
Time: Oct 26, 2016


Description:
    This is a simple implementation of FTP protocol. User authorization, data encryption, checksum verification are included.


Make:
    run 'make' in the package root directory
    this makefile will download some files in the server side so that client can download with the path:
        data/a1.pdf
        data/a2.pdf
        data/a3.pdf

quick run:
    !!! there is a example input and outout in the file Results.txt, which will give more details on how this program works

    AFTER MAKE:
    In the server machine:(You can define the server port in the script)
        cd server
        chmod +x ./run_server.sh
        ./run_server.sh

    In the client machine(You can define the server port and address in the run_client.sh script)
        cd client
        chmod +x ./run_client.sh
        ./run_client.sh

        register or login following the prompted information

        For testing single file functionality, when system asks for file path, type:
            data/a1.pdf

        For testing the multi-file functionality, when system asks for file path: type:
            data/a1.pdf data/a2.pdf data/a3.pdf

    After testing the client, you can also run client with manually-made corruption. 
    In the client machine(You can define the server port and address in the run_client_corrupted.sh script)
        cd client_corrupted
        chmod +x ./run_client_corrupted.sh
        ./run_client_client_corrupted.sh

        register or login following the prompted information

        For testing single file functionality, when system asks for file path, type:
            data/a1.pdf

        For testing the multi-file functionality, when system asks for file path: type:
            data/a1.pdf data/a2.pdf data/a3.pdf

    

Notes:
    1. when the client is asked for path, the path will be a relative path from server/. For example if you input data/a1.pdf, the server will transfer data/a1.pdf to client's working directory
    
    2. In my current implementation, after each file transfering. For each file if checksum is not correct, there will be 3 retries. If all the retris fail, client will get disconnected
    
    3. To test functionality of checksum, I add some synthetic corruption in  src/corruption/dataTransform.java :
        buf[0] = (byte)!buf[0]
        which will inverse the first byte of each buffer read. 
    
    
the program works in this way:
  0.create socket(control)
  1.authorization
  2.send file path to server
  3.receive reply from server
  4.for each file
      create socket(data)
      transfer file information(length, checksum)
      transfer data(using encrypted stream)
      close socket(data)
      checksum verify
      if any error happens close connection and client exit
  5. if all files are verified, need more files?
      yes: go to 2
      no: exit

